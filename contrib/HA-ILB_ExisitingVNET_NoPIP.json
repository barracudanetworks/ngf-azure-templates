{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "ilbAddr": {
      "type": "string",
      "defaultValue": "172.16.25.254",
      "metadata": {
        "description": "Static Private IP Address of Azure ILB."
      }
    },
    "prefix": {
      "type": "string",
      "defaultValue": "ngf-hailb",
      "metadata": {
        "description": "Prefix to be prepended to all created resources."
      }
    },

    "ilbProbePort": {
      "type": "int",
      "defaultValue": 691,
      "metadata": {
        "description": "Health Probe Port of Azure ILB."
      }
    },
    "sizeNGF": {
      "type": "string",
      "defaultValue": "Standard_F1s",
      "metadata": {
        "description": "Size of the NGF VMs."
      }
    },
    "ngfPassword": {
      "type": "secureString",
      "metadata": {
        "description": "Admin Password of NGF VMs."
      }
    },
    "ngfIpAddr1": {
      "type": "string",
      "defaultValue": "172.16.25.4",
      "metadata": {
        "description": "Private IP Address of NGF VM #1."
      }
    },
    "ngfIpMask": {
      "type": "string",
      "defaultValue": "24",
      "metadata": {
        "description": "CIDR Subnet Mask Value (Only Integers no slash) i.e. /24, /23, /22, etc..."
      }
    },
    "ngfIpGw": {
      "type": "string",
      "defaultValue": "172.16.25.1",
      "metadata": {
        "description": "Default Gateway IP Address for the NGF VMs Subnet (The Second IP Address of the Subnet i.e. Subnet 10.0.0.0/24 would have a Default Gateway IP of 10.0.0.1)."
      }
    },
    "ngfIpAddr2": {
      "type": "string",
      "defaultValue": "172.16.25.5",
      "metadata": {
        "description": "Private IP Address of NGF VM #2 (HA Standby NGF VM)."
      }
    },
    "ilbName": {
      "type": "string",
      "defaultValue": "ngf-hailb-ilb",
      "metadata": {
        "description": "Name of the Azure ILB)."
      }
    },
    "VNETName": {
      "type": "string",
      "defaultValue": "Enter Name of Existing VNET where the NGF VMs will Reside"
    },
    "VNETRG": {
      "type": "string",
      "defaultValue": "Enter Name of Existing VNET Resource Group where the NGF VMs will Reside"
    },
    "Subnet": {
      "type": "string",
      "defaultValue": "Enter Name of Existing Subnet where the NGF VMs will Reside"
    }

  },
  "variables": {

    "apiVersionAS": "2017-03-30",
    "apiVersionVM": "2017-03-30",
    "apiVersionNetwork": "2018-01-01",
    "ngfName1": "[concat( parameters('prefix'), '-NGF')]",
    "ngfName2": "[concat( parameters('prefix'), '-NGF-HA')]",
    "ngfAsName": "[concat( parameters( 'prefix' ), '-haSet')]",
    "ngfNicName1": "[concat( variables('ngfName1'), '_nic0_', uniqueString( resourceGroup().id ))]",
    "ngfNicName2": "[concat( variables('ngfName2'), '_nic0_', uniqueString( resourceGroup().id ))]",
    "singleQuotationMark": "'",
    "ngfCustomData1": "[Base64(concat( '#!/bin/bash\n\n/opb/cloud-setmip ', parameters( 'ngfIpAddr1' ), ' ', parameters( 'ngfIpMask' ), ' ', parameters( 'ngfIpGw' ), '\n', 'echo ', variables('singleQuotationMark'), parameters( 'ngfPassword' ), variables('singleQuotationMark'), ' | /opb/create-dha -s S1 -c -o ', parameters( 'ngfIpAddr2' ), ' -n ', parameters( 'ngfIpMask' ), ' -g ', parameters( 'ngfIpGw' ), '\n'))]",
    "ngfCustomData2": "[Base64('\n')]",
    "apiVersionLB": "2018-01-01",
    "ilbName": "[concat( parameters('prefix'), '-ilb' )]",
    "ilbPoolName": "NGFPool",
    "ilbProbeName": "ngprobe",
    "vnetId": "[resourceId(parameters('VNETRG'),'Microsoft.Network/virtualNetworks', parameters('VNETName'))]",
    "subnetRef": "[concat(variables('vnetId'), '/subnets/', parameters('Subnet'))]"

  },
  "resources": [
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('ngfAsName')]",
      "apiVersion": "[variables('apiVersionAS')]",
      "sku": {
        "name": "Aligned"
      },
      "location": "[resourceGroup().location]",
      "properties": {
        "platformUpdateDomainCount": 3,
        "platformFaultDomainCount": 2
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('ilbName')]",
      "apiVersion": "[variables('apiVersionLB')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "InternalLoadBalancerVIP",
            "properties": {
              "privateIPAddress": "[parameters('ilbAddr')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('ilbPoolName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "lbrule",
            "properties": {
              "sku": {
                "name": "Standard",
                "tier": "Regional"
              },
              "frontendIPConfiguration": {
                "id": "[concat( resourceId('Microsoft.Network/loadBalancers', variables('ilbName')), '/frontendIpConfigurations/InternalLoadBalancerVIP' )]"
              },
              "frontendPort": 0,
              "backendPort": 0,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 15,
              "protocol": "All",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat( resourceId('Microsoft.Network/loadBalancers', variables('ilbName')), '/backendAddressPools/', variables('ilbPoolName'))]"
              },
              "probe": {
                "id": "[concat( resourceId('Microsoft.Network/loadBalancers', variables('ilbName')), '/probes/', variables('ilbProbeName'))]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('ilbProbeName')]",
            "properties": {
              "provisioningState": "Succeeded",
              "protocol": "Tcp",
              "port": "[parameters('ilbProbePort')]",
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ],
        "inboundNatRules": [],
        "outboundNatRules": [],
        "inboundNatPools": []
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables( concat( 'ngfNicName', copyIndex(1)))]",
      "apiVersion": "[variables('apiVersionNetwork')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicCopyLoop",
        "count": 2
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[parameters( concat('ngfIpAddr', copyIndex(1)))]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "privateIPAddressVersion": "IPv4",
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('ilbName')), '/backendAddressPools/NGFPool')]"
                }
              ]
            }
          }
        ],
        "enableAcceleratedNetworking": false,
        "enableIPForwarding": true
      },
      "dependsOn": [
        "[variables('ilbName')]"
      ]
    },

    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "[variables('apiVersionVM')]",
      "name": "[variables( concat( 'ngfName', copyIndex(1)))]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmHaCopyLoop",
        "count": 2
      },
      "plan": {
        "name": "byol",
        "product": "barracuda-ng-firewall",
        "publisher": "barracudanetworks"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('ngfAsName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('sizeNGF')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "barracudanetworks",
            "offer": "barracuda-ng-firewall",
            "sku": "byol",
            "version": "latest"
          },
          "osDisk": {
            "osType": "Linux",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          },
          "dataDisks": []
        },
        "osProfile": {
          "computerName": "[variables( concat( 'ngfName', copyIndex(1)))]",
          "adminUsername": "will-be-replaced-by-root",
          "adminPassword": "[parameters('ngfPassword')]",
          "customData": "[variables( concat( 'ngfCustomData', copyIndex(1)))]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables( concat( 'ngfNicName', copyIndex(1))))]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/availabilitySets', variables('ngfAsName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables( concat( 'ngfNicName', copyIndex(1))))]"
      ]
    }
  ]
}
