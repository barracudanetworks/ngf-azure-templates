{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "prefix": {
      "type": "string",
      "metadata": {
        "description": "identifying prefix for all VM's being build. e.g WeProd would become WeProd-VM-CGF (Max 19 char, no spaces, [A-Za-z0-9]"
      }
    },
    "vNetAddressSpace": {
      "type": "string",
      "metadata": {
        "description": "Address Space of the VNET (e.g. 172.16.136.0/22)"
      },
      "defaultValue": "172.16.136.0/22"
    },
    "subnetCGF": {
      "type": "string",
      "metadata": {
        "description": "Network range of the Subnet containing the NextGen Firewall (e.g. 172.16.136.0/24)"
      },
      "defaultValue": "172.16.136.0/24"
    },
    "subnetRed": {
      "type": "string",
      "metadata": {
        "description": "Network range of the red subnet (e.g. 172.16.137.0/24)"
      },
      "defaultValue": "172.16.137.0/24"
    },
    "subnetGreen": {
      "type": "string",
      "metadata": {
        "description": "Network range of the green subnet (e.g. 172.16.138.0/24)"
      },
      "defaultValue": "172.16.138.0/24"
    },
    "vNetAddressSpaceSpoke1": {
      "type": "string",
      "metadata": {
        "description": "Address Space of the Spoke 1 VNET (e.g. 172.16.140.0/23)"
      },
      "defaultValue": "172.16.140.0/23"
    },
    "vNetAddressSpaceSpoke2": {
      "type": "string",
      "metadata": {
        "description": "Address Space of the Spoke 2 VNET (e.g. 172.16.142.0/23)"
      },
      "defaultValue": "172.16.142.0/23"
    },
    "subnetSpoke1": {
      "type": "string",
      "metadata": {
        "description": "Network range of the Subnet Spoke 1 (e.g. 172.16.140.0/24)"
      },
      "defaultValue": "172.16.140.0/24"
    },
    "subnetSpoke2": {
      "type": "string",
      "metadata": {
        "description": "Network range of the Subnet Spoke 2 (e.g. 172.16.142.0/24)"
      },
      "defaultValue": "172.16.142.0/24"
    },
    "imageSKU": {
      "type": "string",
      "metadata": {
        "description": "SKU Hourly (PAYG) or BYOL (Bring your own license)"
      },
      "allowedValues": [
        "hourly",
        "byol"
      ],
      "defaultValue": "byol"
    },
    "version": {
      "type": "string",
      "metadata": {
        "description": "Version of the Barracuda CloudGen Firewall to install"
      },
      "allowedValues": [ "latest", "8.0.0047501", "7.2.205701", "7.2.112901", "7.1.306101", "7.1.210401" ],
      "defaultValue": "latest"
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_F1s",
      "allowedValues": [ "Standard_F1s", "Standard_F2s", "Standard_F4s", "Standard_F8s", "Standard_D1_v2", "Standard_D2_v2", "Standard_D3_v2", "Standard_D4_v2", "Standard_DS1_v2", "Standard_DS2_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_D2_v3", "Standard_D4_v3", "Standard_D8_v3", "Standard_D2S_v3", "Standard_D4S_v3", "Standard_D8S_v3" ],
      "metadata": {
        "description": "Size of the VMs to be created"
      }
    },
    "ccManaged": {
      "type": "string",
      "allowedValues": [
        "yes",
        "no"
      ],
      "defaultValue": "no"
    },
    "ccClusterName": {
      "type": "string",
      "defaultValue": "only used when ccManaged set to yes"
    },
    "ccRangeId": {
      "type": "string",
      "defaultValue": "only used when ccManaged set to yes"
    },
    "ccIpAddress": {
      "type": "string",
      "defaultValue": "only used when ccManaged set to yes"
    },
    "ccSecret": {
      "type": "securestring",
      "defaultValue": "only used when ccManaged set to yes"
    }
  },
  "variables": {
    "computeApiVersion": "2018-06-01",
    "networkApiVersion": "2018-04-01",
    "storageApiVersion": "2018-07-01",

    "imagePublisher": "barracudanetworks",
    "imageOffer": "barracuda-ng-firewall",

    "storageAccountType": "Standard_LRS",
    "storageAccountName": "[concat(uniquestring(resourceGroup().id),'storage')]",

    "nsgName": "[concat(parameters('prefix'),'-NSG-CGF')]",
    "avName": "[concat(parameters('prefix'),'-AV-CGF')]",
    "vNetName": "[concat(parameters('prefix'),'-VNET')]",
    "subnetNameCGF": "[concat(parameters('prefix'),'-SUBNET-CGF')]",
    "subnetRefCGF": "[resourceID('Microsoft.Network/virtualNetworks/subnets',variables('vNetName'),variables('subnetNameCGF'))]",
    "subnetNameRed": "[concat(parameters('prefix'),'-SUBNET-RED')]",
    "subnetNameGreen": "[concat(parameters('prefix'),'-SUBNET-GREEN')]",
    "rtableNameRed": "[concat( parameters('prefix'), '-RT-FOR-RED' )]",
    "rtableRefRed": "[resourceID('Microsoft.Network/routeTables',variables('rtableNameRed'))]",
    "rtableNameGreen": "[concat( parameters('prefix'), '-RT-FOR-GREEN' )]",
    "rtableRefGreen": "[resourceID('Microsoft.Network/routeTables',variables('rtableNameGreen'))]",

    "vNetNameSpoke1": "[concat(parameters('prefix'),'-VNET-SPOKE1')]",
    "vNetNameSpoke2": "[concat(parameters('prefix'),'-VNET-SPOKE2')]",
    "subnetNameSpoke1": "[concat(parameters('prefix'),'-SUBNET-SPOKE1')]",
    "subnetNameSpoke2": "[concat(parameters('prefix'),'-SUBNET-SPOKE2')]",
    "rtableNameSpoke1": "[concat( parameters('prefix'), '-RT-FOR-SPOKE1' )]",
    "rtableRefSpoke1": "[resourceID('Microsoft.Network/routeTables',variables('rtableNameSpoke1'))]",
    "rtableNameSpoke2": "[concat( parameters('prefix'), '-RT-FOR-SPOKE2' )]",
    "rtableRefSpoke2": "[resourceID('Microsoft.Network/routeTables',variables('rtableNameSpoke2'))]",
    "HubtoSpoke1PeeringName": "[concat(variables('vNetName'), '-2-', variables('vNetNameSpoke1'))]",
    "Spoke1toHubPeeringName": "[concat(variables('vNetNameSpoke1'), '-2-', variables('vNetName'))]",
    "HubtoSpoke2PeeringName": "[concat(variables('vNetName'), '-2-', variables('vNetNameSpoke2'))]",
    "Spoke2toHubPeeringName": "[concat(variables('vNetNameSpoke2'), '-2-', variables('vNetName'))]",


    "cgfVmName1": "[concat(parameters('prefix'),'-VM-CGF-A')]",
    "cgfVmName2": "[concat(parameters('prefix'),'-VM-CGF-B')]",
    "cgfNicName1": "[concat(variables('cgfVmName1'),'-NIC')]",
    "cgfNicName2": "[concat(variables('cgfVmName2'),'-NIC')]",
    "cgfPIPAddressName1": "[concat(variables('cgfVmName1'),'-PIP')]",
    "cgfPIPAddressName2": "[concat(variables('cgfVmName2'),'-PIP')]",
    "cgfPIPAddressType": "Static",

    "cgfDiskName1": "[concat(variables('cgfVmName1'), '-osdisk')]",
    "cgfDiskName2": "[concat(variables('cgfVmName2'), '-osdisk')]",
    "osType": "Linux",

    "lbPIPAddressName": "[concat(parameters('prefix'),'-CGF-LB-PIP')]",
    "dnsNameForCGF": "[toLower( concat( parameters('prefix'), '-cgf-', uniqueString(resourceGroup().id) ) )]",
    "lbName-external": "[concat(parameters('prefix'),'-ELB-CGF')]",
    "lbName-internal": "[concat(parameters('prefix'),'-ILB-CGF')]",
    "lbID-external": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName-external'))]",
    "lbID-internal": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName-internal'))]",
    "lbPIPID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('lbPIPAddressName'))]",
    "lbFrontEndPoolID-external": "[concat(variables('lbID-external'),'/frontendIPConfigurations/loadBalancerFrontend')]",
    "lbFrontEndPoolID-internal": "[concat(variables('lbID-internal'),'/frontendIPConfigurations/loadBalancerFrontend')]",
    "lbBackEndPoolID-external": "[concat(variables('lbID-external'),'/backendAddressPools/loadBalancerBackend')]",
    "lbBackEndPoolID-internal": "[concat(variables('lbID-internal'),'/backendAddressPools/loadBalancerBackend')]",
    "lbProbeID-external": "[concat(variables('lbID-external'),'/probes/HAProbe')]",
    "lbProbeID-internal": "[concat(variables('lbID-internal'),'/probes/HAProbe')]",
    "lbIPAddress-internal": "[concat( variables( 'cgfSubnetAddrSplit' )[0], '.', variables( 'cgfSubnetAddrSplit' )[1], '.', variables( 'cgfSubnetAddrSplit' )[2], '.', add( int( variables( 'cgfSubnetAddrSplit' )[3]), 10 ))]",

    "adminUsername": "notused",
    "singleQuotationMark": "'",

    "cgfSubnetSplit": "[split( parameters( 'subnetCGF' ), '/' )]",
    "cgfSubnetAddrSplit": "[split( variables( 'cgfSubnetSplit' )[0], '.' )]",
    "cgfSubnetMask": "[variables( 'cgfSubnetSplit' )[1]]",
    "cgfSubnetDefaultGw": "[concat( variables( 'cgfSubnetAddrSplit' )[0], '.', variables( 'cgfSubnetAddrSplit' )[1], '.', variables( 'cgfSubnetAddrSplit' )[2], '.', add( int( variables( 'cgfSubnetAddrSplit' )[3]), 1 ))]",
    "cgfVmAddress1": "[concat( variables( 'cgfSubnetAddrSplit' )[0], '.', variables( 'cgfSubnetAddrSplit' )[1], '.', variables( 'cgfSubnetAddrSplit' )[2], '.', add( int( variables( 'cgfSubnetAddrSplit' )[3]), 4 ))]",
    "cgfVmAddress2": "[concat( variables( 'cgfSubnetAddrSplit' )[0], '.', variables( 'cgfSubnetAddrSplit' )[1], '.', variables( 'cgfSubnetAddrSplit' )[2], '.', add( int( variables( 'cgfSubnetAddrSplit' )[3]), 6 ))]",
    "cgfCustomData1": "[Base64(concat( '#!/bin/bash\n\n/opb/cloud-setmip ', variables('cgfVmAddress1'), ' ', variables( 'cgfSubnetMask' ), ' ', variables( 'cgfSubnetDefaultGw' ), '\n', 'echo ', variables('singleQuotationMark'), parameters( 'adminPassword' ), variables('singleQuotationMark'), ' | /opb/create-dha -s S1 -c -o ', variables('cgfVmAddress2'), ' -n ', variables( 'cgfSubnetMask' ), ' -g ', variables( 'cgfSubnetDefaultGw' ), '\n/opb/cloud-enable-ssh\n/opb/cloud-enable-rest\n'))]",
    "cgfCustomData2": "[Base64('\n')]",
    "cgfCustomDataCC1": "[base64(concat('#!/bin/bash\n\n', 'echo \"*/2 * * * * root echo \\\"', parameters( 'ccSecret' ), '\\\" | /opt/phion/bin/getpar -a ', parameters('ccIpAddress'), ' -r ', parameters( 'ccRangeId' ), ' -c ', parameters( 'ccClusterName' ), ' -b ', variables( 'cgfVmName1' ), ' -d /opt/phion/update/box.par -s --verbosity 10 >> /tmp/getpar.log && /etc/rc.d/init.d/phion stop && /etc/rc.d/init.d/phion start && rm /etc/cron.d/getpar\" > /etc/cron.d/getpar\n'))]",
    "cgfCustomDataCC2": "[base64(concat('#!/bin/bash\n\n', 'echo \"*/2 * * * * root echo \\\"', parameters( 'ccSecret' ), '\\\" | /opt/phion/bin/getpar -a ', parameters('ccIpAddress'), ' -r ', parameters( 'ccRangeId' ), ' -c ', parameters( 'ccClusterName' ), ' -b ', variables( 'cgfVmName2' ), ' -d /opt/phion/update/box.par -s --verbosity 10 >> /tmp/getpar.log && /etc/rc.d/init.d/phion stop && /etc/rc.d/init.d/phion start && rm /etc/cron.d/getpar\" > /etc/cron.d/getpar\n'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS"
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('nsgName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowAnyInbound",
            "properties": {
              "description": "Allow Any",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "1-65535",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowAnyOutbound",
            "properties": {
              "description": "Allow Any",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "1-65535",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vNetName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('nsgName')]",
        "[variables('rtableRefRed')]",
        "[variables('rtableRefGreen')]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vNetAddressSpace')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetNameCGF')]",
            "properties": {
              "addressPrefix": "[parameters('subnetCGF')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
              }
            }
          },
          {
            "name": "[variables('subnetNameRed')]",
            "properties": {
              "addressPrefix": "[parameters('subnetRed')]",
              "routeTable": {
                "id": "[variables('rtableRefRed')]"
              }
            }
          },
          {
            "name": "[variables('subnetNameGreen')]",
            "properties": {
              "addressPrefix": "[parameters('subnetGreen')]",
              "routeTable": {
                "id": "[variables('rtableRefGreen')]"
              }
            }
          }
        ]
      },
      "resources": [
        {
            "apiVersion": "2016-06-01",
            "type": "virtualNetworkPeerings",
            "name": "[variables('HubtoSpoke1PeeringName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('vNetName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('vNetNameSpoke1'))]"
            ],
            "comments": "This is the peering from HUB to Spoke 1",
            "properties": {
                "allowVirtualNetworkAccess": "true",
                "allowForwardedTraffic": "true",
                "allowGatewayTransit": "false",
                "useRemoteGateways": "false",
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks',variables('vNetNameSpoke1'))]"
                }
            }
        },
        {
            "apiVersion": "2016-06-01",
            "type": "virtualNetworkPeerings",
            "name": "[variables('HubtoSpoke2PeeringName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('vNetName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('vNetNameSpoke2'))]"
            ],
            "comments": "This is the peering from HUB to Spoke 2",
            "properties": {
                "allowVirtualNetworkAccess": "true",
                "allowForwardedTraffic": "true",
                "allowGatewayTransit": "false",
                "useRemoteGateways": "false",
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks',variables('vNetNameSpoke2'))]"
                }
            }
        }
      ]
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vNetNameSpoke1')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('nsgName')]",
        "[variables('rtableRefSpoke1')]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vNetAddressSpaceSpoke1')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetNameSpoke1')]",
            "properties": {
              "addressPrefix": "[parameters('subnetSpoke1')]",
              "routeTable": {
                "id": "[variables('rtableRefSpoke1')]"
              }
            }
          }
        ]
      },
      "resources": [
        {
            "apiVersion": "2016-06-01",
            "type": "virtualNetworkPeerings",
            "name": "[variables('Spoke1toHubPeeringName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('vNetName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('vNetNameSpoke1'))]"
            ],
            "comments": "This is the peering from Spoke 1 to HUB",
            "properties": {
                "allowVirtualNetworkAccess": "true",
                "allowForwardedTraffic": "true",
                "allowGatewayTransit": "false",
                "useRemoteGateways": "false",
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks',variables('vNetName'))]"
                }
            }
        }
      ]
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vNetNameSpoke2')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('nsgName')]",
        "[variables('rtableRefSpoke2')]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vNetAddressSpaceSpoke2')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetNameSpoke2')]",
            "properties": {
              "addressPrefix": "[parameters('subnetSpoke2')]",
              "routeTable": {
                "id": "[variables('rtableRefSpoke2')]"
              }
            }
          }
        ]
      },
      "resources": [
        {
            "apiVersion": "2016-06-01",
            "type": "virtualNetworkPeerings",
            "name": "[variables('Spoke2toHubPeeringName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('vNetName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('vNetNameSpoke2'))]"
            ],
            "comments": "This is the peering from Spoke 2 to HUB",
            "properties": {
                "allowVirtualNetworkAccess": "true",
                "allowForwardedTraffic": "true",
                "allowGatewayTransit": "false",
                "useRemoteGateways": "false",
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks',variables('vNetName'))]"
                }
            }
        }
      ]
    },
    {
      "apiVersion": "[variables( 'networkApiVersion' )]",
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('rtableNameRed')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "routes": [
          {
            "name": "to-Internet",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('lbIPAddress-internal')]"
            }
          },
          {
            "name": "to-Green",
            "properties": {
              "addressPrefix": "[parameters('subnetGreen')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('lbIPAddress-internal')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables( 'networkApiVersion' )]",
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('rtableNameGreen')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "routes": [
          {
            "name": "to-Internet",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('lbIPAddress-internal')]"
            }
          },
          {
            "name": "to-Red",
            "properties": {
              "addressPrefix": "[parameters('subnetRed')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('lbIPAddress-internal')]"
            }
          }
         ]
      }
    },
    {
      "apiVersion": "[variables( 'networkApiVersion' )]",
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('rtableNameSpoke1')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "routes": [
          {
            "name": "to-Internet",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('lbIPAddress-internal')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables( 'networkApiVersion' )]",
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('rtableNameSpoke2')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "routes": [
          {
            "name": "to-Internet",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('lbIPAddress-internal')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('avName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [],
      "properties": {
          "platformFaultDomainCount": 2,
          "platformUpdateDomainCount": 5                
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('lbPIPAddressName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('cgfPIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsNameForCGF')]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "name": "[variables('lbName-external')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "comments": "External LoadBalancer for the Barracuda Next Gen Firewall F cluster",
      "tags": {
        "displayName": "CGFLB-External"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('lbPIPAddressName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks',variables('vNetName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "loadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('lbPIPID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "loadBalancerBackend"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "IPSEC-IKE",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('lbFrontEndPoolID-external')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbBackEndPoolID-external')]"
              },
              "protocol": "Udp",
              "frontendPort": 500,
              "backendPort": 500,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbProbeID-external')]"
              }
            }
          },
          {
            "name": "IPSEC-NATT",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('lbFrontEndPoolID-external')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbBackEndPoolID-external')]"
              },
              "protocol": "Udp",
              "frontendPort": 4500,
              "backendPort": 4500,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbProbeID-external')]"
              }
            }
          },
          {
            "name": "TINA-UDP",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('lbFrontEndPoolID-external')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbBackEndPoolID-external')]"
              },
              "protocol": "Udp",
              "frontendPort": 691,
              "backendPort": 691,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbProbeID-external')]"
              }
            }
          },
          {
            "name": "TINA-TCP",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('lbFrontEndPoolID-external')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbBackEndPoolID-external')]"
              },
              "protocol": "Tcp",
              "frontendPort": 691,
              "backendPort": 691,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbProbeID-external')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "HAProbe",
            "properties": {
              "protocol": "Tcp",
              "port": 65000,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "name": "[variables('lbName-internal')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks',variables('vNetName'))]"
      ],
      "comments": "Internal LoadBalancer for the Barracuda Next Gen Firewall F cluster",
      "tags": {
        "displayName": "CGFLB-Internal"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "loadBalancerFrontEnd",
            "properties": {
              "privateIPAddress": "[variables('lbIPAddress-internal')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnetRefCGF')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "loadBalancerBackend"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "lbrule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('lbFrontEndPoolID-internal')]"
              },
              "frontendPort": 0,
              "backendPort": 0,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 15,
              "protocol": "All",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[variables('lbBackEndPoolID-internal')]"
              },
              "probe": {
                "id": "[variables('lbProbeID-internal')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "HAProbe",
            "properties": {
              "protocol": "Tcp",
              "port": 65000,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('cgfPIPAddressName1')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('cgfPIPAddressType')]"
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('cgfPIPAddressName2')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('cgfPIPAddressType')]"
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('cgfNicName1')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('cgfPIPAddressName1'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('vNetName'))]",
        "[variables('lbID-external')]",
        "[variables('lbID-internal')]"
      ],
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables( 'cgfVmAddress1' )]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('cgfPIPAddressName1'))]"
              },
              "subnet": {
                "id": "[variables('subnetRefCGF')]"
              },
              "primary": true,
              "loadBalancerBackendAddressPools": [
                { "id": "[variables('lbBackEndPoolID-external')]" },
                { "id": "[variables('lbBackEndPoolID-internal')]" }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('cgfNicName2')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('cgfPIPAddressName2'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('vNetName'))]",
        "[variables('lbID-external')]",
        "[variables('lbID-internal')]"
      ],
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables( 'cgfVmAddress2' )]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('cgfPIPAddressName2'))]"
              },
              "subnet": {
                "id": "[variables('subnetRefCGF')]"
              },
              "primary": true,
              "loadBalancerBackendAddressPools": [
                { "id": "[variables('lbBackEndPoolID-external')]" },
                { "id": "[variables('lbBackEndPoolID-internal')]" }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "identity": { 
        "type": "SystemAssigned"
      },
      "name": "[variables('cgfVmName1')]",
      "location": "[resourceGroup().location]",
      "plan": {
        "name": "[parameters('imageSKU')]",
        "Product": "[variables('imageOffer')]",
        "Publisher": "[variables('imagePublisher')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('cgfNicName1'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('avName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('avName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('cgfVmName1')]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[if(equals(parameters('ccManaged'), 'yes'), variables('cgfCustomDataCC1'), variables('cgfCustomData1'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "[parameters('version')]"
          },
          "osDisk": {
            "name": "[concat(variables('cgfVMName1'),'-osdisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('cgfNicName1'))]",
              "properties": {
                "primary": true
              }
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob)]"
          }
        }
      }
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "identity": { 
        "type": "SystemAssigned"
      },
      "name": "[variables('cgfVmName2')]",
      "location": "[resourceGroup().location]",
      "plan": {
        "name": "[parameters('imageSKU')]",
        "Product": "[variables('imageOffer')]",
        "Publisher": "[variables('imagePublisher')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('cgfNicName2'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('avName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('avName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('cgfVMName2')]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[if(equals(parameters('ccManaged'), 'yes'), variables('cgfCustomDataCC2'), variables('cgfCustomData2'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "[parameters('version')]"
          },
          "osDisk": {
            "name": "[concat(variables('cgfVMName2'),'-osdisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('cgfNicName2'))]",
              "properties": {
                "primary": true
              }
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob)]"
          }
        }
      }
    }
  ],
  "outputs": {
    "CGF-A": {
      "type": "string",
      "value": "[reference(variables('cgfPIPAddressName1')).ipAddress]"
    },
    "CGF-B": {
      "type": "string",
      "value": "[reference(variables('cgfPIPAddressName2')).ipAddress]"
    },
    "CGF-LB": {
      "type": "string",
      "value": "[reference(variables('lbPIPAddressName')).dnsSettings.fqdn]"
    }
  }
}